<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>文钦的朝花夕拾</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-15T12:58:08.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>文钦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于 ViewBinding 的二三事</title>
    <link href="http://yoursite.com/2020/04/13/ViewBinding/"/>
    <id>http://yoursite.com/2020/04/13/ViewBinding/</id>
    <published>2020-04-13T12:42:38.207Z</published>
    <updated>2020-04-15T12:58:08.223Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/04/11/9vzHZi6IBTcgNtA.png" alt="ViewBinding.png"></p><p><strong>ViewBinding</strong> 是 Android Studio 3.6 推出的新工具，可以用来轻松高效地编写与 View 交互的代码。在启用后，根据 XML 布局文件会生成对应的 binding 类，这个类包含了布局内所有设置过 id 的 View 的引用。</p><p>官方推荐使用它来替代 <code>findVeiwById</code> ；<a href="https://twitter.com/JakeWharton" target="_blank" rel="noopener">Jake Wharton</a> 也在社交平台上推荐它替换 <code>ButterKnife</code>；在 kotlin中常用的 <code>Kotlin Synthetics</code> 又有什么比不上它的呢？它本身会不会有什么坑？让我们展开讲讲。</p><a id="more"></a><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>相比于传统的 <code>findViewById</code>，<code>ViewBinding</code> 最直观的优势是减少代码量。对于追求效（lan）率（duo）的工程师来说，这是最吸引人的地方。</p><p>虽然 <code>ButterKnife</code> 也可以通过插件做到这点，但是那些 <code>@BindView</code> 还是实打实地存在你的代码中，并且以后每增减一个 widget，你都需要考虑那些绑定关系。而 <code>ViewBinding</code> 是动态生效的，在你的 XML 布局文件添加完新的 widget 后，<code>ViewBinding</code> 类就可以调用它了😝</p><p><img src="https://i.loli.net/2020/04/13/S17cR4a3olGwxVs.jpg" alt="happy.jpg"></p><p>有朋友可能会说了，<code>Kotlin Synthetics</code> 同样也减少了很多代码量呢！跟你这个 <code>ViewBinding</code> 比起来，它不香么？那这里就不得不提到 <code>ViewBinding</code> 的第二个优势了——安全。</p><p>我们知道，<code>Kotlin Synthetics</code> 是可以通过 View 或者 Activity 引用到任意 XML 中的 widget，如果不小心引用错就会导致应用 crash。而且这种异常在编译期还没法被发现，只有程序运行到使用错误的地方才会出现，这就给应用留下了安全隐患⚠️</p><p>而 ViewBinding 则不具备这样的问题，它保证了你只能调用对应 XML 布局文件的 widget，相对来说更安全。而且它兼容 Java，这对于还有部分代码没迁移到 Kotlin 的代码来说，也是比较友好的。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">ViewBinding</th><th style="text-align:center">ButterKnife</th><th style="text-align:center">Kotlin Synthetics</th><th style="text-align:center">findViewById</th></tr></thead><tbody><tr><td style="text-align:left">空安全</td><td style="text-align:center">✅</td><td style="text-align:center">✅</td><td style="text-align:center">⛔️</td><td style="text-align:center">⛔️</td></tr><tr><td style="text-align:left">保证引用是来自<br>XML 布局文件</td><td style="text-align:center">✅</td><td style="text-align:center">⛔️</td><td style="text-align:center">⛔️</td><td style="text-align:center">⛔️</td></tr><tr><td style="text-align:left">支持 Kotlin 和 Java</td><td style="text-align:center">✅</td><td style="text-align:center">✅</td><td style="text-align:center">⛔️</td><td style="text-align:center">✅</td></tr><tr><td style="text-align:left">代码量</td><td style="text-align:center">❤️</td><td style="text-align:center">💔</td><td style="text-align:center">❤️</td><td style="text-align:center">💔</td></tr></tbody></table><blockquote><p>尽管 ButterKnife 有保护 View 的空安全，但是它不能保证 id 是不是来自于声明的 xml</p></blockquote><p>那又有朋友会问，你这个是不是跟 <code>DataBinding</code> 一样呀！我用了 <code>DataBinding</code> 是不是就不需要它了呀？</p><p>虽然他们两者都是生成 Binding 类，但是 <code>ViewBinding</code> 更倾向于在简单的场景下使用， 因此它相对于 <code>DataBinding</code>  来说：</p><ul><li>无需注解，编译时间更快</li><li>使用方便，因为它不需要对 XML 布局文件进行特殊标志，所以在项目里启动它非常方便</li></ul><p>当然，比起 <code>DataBinding</code> 它也有些限制：</p><ul><li>不支持布局变量和布局表达式，所以它不能从 XML 布局文件中获取数据动态更新 UI</li><li>不支持双向数据绑定</li></ul><p>因此，你可以同时支持 <code>ViewBinding</code> 和 <code>DataBinding</code>。如果需要额外的特性，你可以让 <code>DataBinding</code> 来完成，而简单的应用就交给 <code>ViewBinding</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 <code>build.gradle</code> 中声明使用 <code>ViewBinding</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android Studio 3.6</span></span><br><span class="line">android &#123;</span><br><span class="line">    viewBinding &#123;</span><br><span class="line">        enabled = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Android Stduio 4.0 中，<code>ViewBinding</code> 已经移入<code>buildFeatures</code> 中了</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android Studio 4.0</span></span><br><span class="line">android &#123;</span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明后，根据你的 xml 命名动态生成 **Binding，例如 activity_home 就会生成 ActivityHomeBinding</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityHomeBinding</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    binding = ActivityHomeBinding.inflate(layoutInflater)</span><br><span class="line">    <span class="keyword">val</span> view = binding.root</span><br><span class="line">    setContentView(view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你已经 inflate 了 xml，那也可以使用 <code>bind(view)</code> 将 <code>ViewBinding</code> 和 View 绑定，这便于我们对自定义 View 进行重构。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>从去年年底开始，我就在 Android Studio 3.6 preview 版本上使用 <code>ViewBinding</code> 开发了。下面分享一下项目内的实践思路。</p><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><p>最经常使用的 Fragment，我创建了 BindingFragment，继承于项目里原来的 <code>BaseFragment</code>，让 Binding 的业务尽量不影响原来的封装。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingFragment</span>&lt;<span class="type">T : ViewBinding</span>&gt; : <span class="type">BaseFragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        initData().invoke(arguments ?: Bundle())</span><br><span class="line">        binding = createBinding().invoke(inflater, container, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        setupView().invoke(binding)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">createBinding</span><span class="params">()</span></span>: (</span><br><span class="line">        inflater: LayoutInflater,</span><br><span class="line">        container: ViewGroup?,</span><br><span class="line">        attachToRoot: <span class="built_in">Boolean</span></span><br><span class="line">    ) -&gt; T</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>: Bundle.() -&gt; <span class="built_in">Unit</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">setupView</span><span class="params">()</span></span>: T.() -&gt; <span class="built_in">Unit</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ctx</span><span class="params">()</span></span>: Context = binding.root.context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeFragment</span> : <span class="type">BindingFragment</span>&lt;<span class="type">FragmentHomeBinding</span>&gt;</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createBinding</span><span class="params">()</span></span>: (</span><br><span class="line">        inflater: LayoutInflater,</span><br><span class="line">        container: ViewGroup?,</span><br><span class="line">        attachToRoot: <span class="built_in">Boolean</span></span><br><span class="line">    ) -&gt; FragmentHomeBinding &#123;</span><br><span class="line">        <span class="keyword">return</span> FragmentHomeBinding::inflate</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setupView</span><span class="params">()</span></span>: FragmentHomeBinding.() -&gt; <span class="built_in">Unit</span> = &#123;</span><br><span class="line">        tvContent.text = <span class="string">"ViewBinding is cool"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于子类，我只需要关心 <code>fragment_home.xml</code> 生成的 <code>FragmentHomeBinding</code>，不需要额外对 <code>R.layout.fragment_home</code> 进行处理。在 <code>setupView</code> 中我可以直接使用 <code>tvContent</code>  的引用，就像在使用 <code>kotlin Synthetics</code> 一样。</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>自定义 View 也是经常使用的，这里有两种使用思路</p><p>先用 <code>View#inflate</code> 绑定 XML 后，再用 <code>ViewBinding#bind</code> 绑定 View，这样就可以使用 <code>ViewBinding</code> 来渲染相应的 UI，这种方式方便我们重构已经写好的 View：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyView</span> <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    context: Context, attrs: AttributeSet? = <span class="literal">null</span>, defStyleAttr: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">) : ConstraintLayout(context, attrs, defStyleAttr) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding: ViewEmptyBinding</span><br><span class="line">    </span><br><span class="line">    init &#123;</span><br><span class="line">        View.inflate(context, R.layout.view_empty, <span class="keyword">this</span>)</span><br><span class="line">        binding = ViewEmptyBinding.bind(<span class="keyword">this</span>)</span><br><span class="line">        binding.apply &#123;</span><br><span class="line">            tvTitle.text = <span class="string">"Data is emtpy"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种是使用 <code>ViewBinding#inflate</code>，这种就不用关心 <code>R.layout.view_emty</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyView</span> <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    context: Context, attrs: AttributeSet? = <span class="literal">null</span>, defStyleAttr: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">) : ConstraintLayout(context, attrs, defStyleAttr) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding = ViewEmptyBinding.inflate(LayoutInflater.from(context), <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        binding.apply &#123;</span><br><span class="line">            tvTitle.text = <span class="string">"Data is emtpy"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><p>项目里的 Adapter 是基于第三方库进行封装的，这里提供一种基于 <code>RecyclerView.Adapter</code> 的封装作为参考：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingViewHolder</span>&lt;<span class="type">VB : ViewBinding</span>&gt;</span>(<span class="keyword">val</span> vb: VB) : RecyclerView.ViewHolder(vb.root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingAdapter</span>&lt;<span class="type">VB : ViewBinding, T</span>&gt; : <span class="type">RecyclerView.Adapter</span>&lt;<span class="type">BindingViewHolder&lt;VB</span>&gt;&gt;</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: MutableList&lt;T&gt; = arrayListOf()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: BindingViewHolder&lt;VB&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingViewHolder(</span><br><span class="line">            createBinding().invoke(LayoutInflater.from(parent.context), parent, <span class="literal">false</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = <span class="keyword">data</span>.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">BindingViewHolder</span>&lt;<span class="type">VB</span>&gt;, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">data</span>.getOrNull(position)?.apply &#123; </span><br><span class="line">            update(<span class="keyword">this</span>).invoke(holder.vb)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">createBinding</span><span class="params">()</span></span>: (</span><br><span class="line">        inflater: LayoutInflater,</span><br><span class="line">        container: ViewGroup?,</span><br><span class="line">        attachToRoot: <span class="built_in">Boolean</span></span><br><span class="line">    ) -&gt; VB</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(item: <span class="type">T</span>)</span></span>: VB.() -&gt; <span class="built_in">Unit</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现思路也是和 Fragment 类似的，Adapter 的子类是需要是实现 <code>createBinding</code> 就可以实现相应的逻辑。这里仅提供一个简单的例子，目前这个封装还解决不了多布局的问题。如果需要解决多布局的问题还需要基于 ViewHolder 进行封装，聪明的你能想出来么？</p><blockquote><p>每个项目都有自己封装的关于 Adapter 类，这边提供的是封装思路仅为抛砖引玉。这里奉上我<a href="https://gist.github.com/wenqin-231/70ee973b6d130e7e247360ee6d6021ad" target="_blank" rel="noopener">基于 ViewHolder 的封装</a>，有更好的想法欢迎与我讨论</p></blockquote><p>看完了我们上面三个的封装，你会发现，我尽量都是让 ViewBinding 去替换掉我原先使用 <code>R.layout.xxx</code> 的地方，让调用方只关心 ViewBinding 就可以写好代码。不好的地方就是 lint 检查的时候会发现我有大量的 xml 没有使用😂</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>前面是聊了这么久 ViewBinding 的优点，我们再来讲讲它的缺点：</p><ul><li>调用方式的不友好<ul><li>与 <code>kotlin synthetics</code> 相比，widget 的引用要依赖于 binding 的实例，但可以用 apply 或者 run 来缓解</li></ul></li><li>inlcude 标签不友好<ul><li>使用其他方式，即便我们不给 include 加 id，也可以正常使用。而 <code>Viewbinding</code> 你得使用 <code>binding.inlcdeId.widgetId</code> 来获得 widget 的引用。如果 include 里面还有 inlcude ，就只能不停地套娃🙄</li><li>inlcude 如果使用了 merge 标签，你还得 <code>MyInlcudeLayoutBinding.bind(binding.includeId)</code> 来绑定，否则会报错</li></ul></li><li>重复命名不友好<ul><li>如果一个 id 的命名和 inlcude 或者自定义 View 内部的命名相同，那么这个 widget 的引用将会失效，而且程序不会崩溃🤦‍♀️，这种隐藏的问题只有程序运行到那里并且发现 UI 异常才能被发现😭</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对我来说，<code>ViewBinding</code> 还是蛮甜的，由于是 Binding 的引用，每处的调用我会相对比较有安全感，不用担心代码的出错。经过半年的实践开发，也没有遇到比较大的坑，推荐在实际项目中使用😝</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/11/9vzHZi6IBTcgNtA.png&quot; alt=&quot;ViewBinding.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ViewBinding&lt;/strong&gt; 是 Android Studio 3.6 推出的新工具，可以用来轻松高效地编写与 View 交互的代码。在启用后，根据 XML 布局文件会生成对应的 binding 类，这个类包含了布局内所有设置过 id 的 View 的引用。&lt;/p&gt;
&lt;p&gt;官方推荐使用它来替代 &lt;code&gt;findVeiwById&lt;/code&gt; ；&lt;a href=&quot;https://twitter.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jake Wharton&lt;/a&gt; 也在社交平台上推荐它替换 &lt;code&gt;ButterKnife&lt;/code&gt;；在 kotlin中常用的 &lt;code&gt;Kotlin Synthetics&lt;/code&gt; 又有什么比不上它的呢？它本身会不会有什么坑？让我们展开讲讲。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大图加载器 TileView 实践探索（上）</title>
    <link href="http://yoursite.com/2019/03/10/%E5%A4%A7%E5%9B%BE%E5%8A%A0%E8%BD%BD%E5%99%A8%20TileView%20%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2019/03/10/大图加载器 TileView 实践探索（上）/</id>
    <published>2019-03-10T15:14:04.542Z</published>
    <updated>2020-04-13T17:41:01.435Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/04/10/9voj2lwLBfiWdEy.jpg" alt="tiles.jpg"></p><a id="more"></a><p>在显示图片的实践中，我们遇到了一个警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⚠️ W/OpenGLRenderer: Bitmap too large to be uploaded into a texture</span><br></pre></td></tr></table></figure><p>原因是，开启硬件加速会限制图片的大小，不同的设备还会有不同的最大值，这个值可以通过 canvas 获得：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> maxWidth = canvas.maximumBitmapWidth</span><br><span class="line"><span class="keyword">val</span> maxHeight = canvas.maximumBitmapHeight</span><br></pre></td></tr></table></figure><p>我们可以针对超过限制的图片关闭硬件加速，但这又会引起个别性能堪忧的手机卡顿~</p><p><img src="https://i.loli.net/2020/04/09/QIuXl27tHpGvEsh.jpg" alt="card.jpg"></p><p>针对这种尴尬的状况，我们给出了两种解决方案</p><ul><li>建议用户换手机，都9012年还用什么魅蓝红米安卓5.0</li><li>硬件加速还是不关了，把图片大卸八块吧</li></ul><p>第一种方案，我觉得很棒，但是日活会掉，老板会把我大卸八块，像我这种不畏强权但珍爱生命的，会选择第二种…</p><h3 id="图片分块的刀——BitmapRegionDecoder"><a href="#图片分块的刀——BitmapRegionDecoder" class="headerlink" title="图片分块的刀——BitmapRegionDecoder"></a>图片分块的刀——BitmapRegionDecoder</h3><p>说到要把图片分块，人们常常就会想到他——<strong>BitmapRegionDecoder！</strong></p><p>我们来看看官网对这位大师的介绍</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2020/04/09/tyz9FKdoU3cG2bB.png" alt="decpder.png"></h3><p>主要用于原图过大或只显示图片的其中一块，那不正是我们所需要的么！</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bitmap : Bitmap = bitmapRegionDecoder.decodeRegion(rect, options)</span><br></pre></td></tr></table></figure><p>由于 decodeRegion 是一个耗时操作，这里建议您用 RxJava 在异步线程中处理哦~</p><p>值得注意的是，根据文档介绍，在调用 decoder#recycle 时，如果别的线程刚好也调用了 decoder#decodeRegion 、decoder#getWidth 或 decoder#getHeight， 那么就会出现异常，所以这里建议您用线程锁来保证多线程的调用安全~</p><h3 id="图片分块的菜谱——Tile"><a href="#图片分块的菜谱——Tile" class="headerlink" title="图片分块的菜谱——Tile"></a>图片分块的菜谱——Tile</h3><p>现在我们已经“磨刀霍霍向图片”了，那要怎么切好呢~</p><p>####分块</p><p>比较简单的做法，以屏幕高宽为单位切。考虑到用户体验更舒服点，把单位加大到屏幕宽高的1.25倍，这个系数你可以自己掂量，不要让最终值超过 maximum 即可。</p><p>这样我们可以得到一个 Tile 数组，我们屏幕滚动到哪里，就加载哪一块的图片，不显示的就回收了来避免 OOM。</p><p>然而问题又来了，前面说过了，decodeRegion 是一个耗时过程，它要是追不上用户的手势，就会出现图片从黑色的背景中闪出来~</p><p>####渐进式加载</p><p>针对这种情况，我们可以用渐进式加载解决~</p><ul><li>首先，先解析一张长边撑满屏幕的图片，并把它的比例放大到短边撑满备用，这里叫它 fullBitamp</li><li>接着，我们去遍历看看在屏幕内的 Tile 是不是有可以显示的 bitmap</li><li>如果没有的话就显示 fullBitmap 来等待 decode</li><li>显示的回收过程中，不回收 fullBitmap 和 屏幕内的 Tile#bitmap，其它的都回收了</li></ul><p>这样，我们就始终有一个兜底的 fullBitmap，它就像隐形守护者，在解析 bitmap 时出来救火，占个位显示自己的模糊，等 bitmap 加载完，他就完成任务默默离开。</p><p>fullBitmap 由于随时可能被需要，加之占用内存不大，在图片显示过程中一直存在；直到关闭图片，才会把它和显示中的 Tile#bitmap 一起回收掉。</p><p>####sampleSize</p><p>分析完渐进式加载，想必聪明的你已经发现了其中的关键 —— fullBitmap 是一张低质量的、被压缩的图。</p><p>那这究竟是怎么回事？让我们重新看下完整版的 <code>decodeRegion</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> options = BitmapFactory.Options()</span><br><span class="line">options.inSampleSize = tile.sampleSize</span><br><span class="line">decoder.decodeRegion(rect, options)</span><br></pre></td></tr></table></figure><p>如果你了解过图片压缩，想必你立刻就明白了~ 这是通过 tile#sampleSize 来控制每一块图片的解析质量，sampleSize 越高，则图片被压缩的程度就越大，内存就越小。</p><p><img src="https://i.loli.net/2020/04/09/YsH2W1adgIxob4y.png" alt="tile.png"></p><p>因此，我们可以根据 scale 算出匹配的 sampleSize，不同的 sampleSize 就对应不同的 tile 数组，把它们放进 TileMap 中。显示的时候只需要根据 scale 算出的 sampleSize 匹配到对应的 tile 数组，就可以使用更合适的 tile 加载出对应区域的图片。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 scale 计算出相应的 inSampleSize</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calculateInSampleSize</span><span class="params">(scale: <span class="type">Float</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> reqWidth = (srcWidth * scale).toInt()</span><br><span class="line">    <span class="keyword">val</span> reqHeight = (srcHeight * scale).toInt()</span><br><span class="line">    <span class="keyword">var</span> inSampleSize = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (srcHeight &gt; reqHeight || srcWidth &gt; reqWidth) &#123;</span><br><span class="line">        <span class="keyword">val</span> heightRatio = Math.round(srcHeight / reqHeight.toFloat())</span><br><span class="line">        <span class="keyword">val</span> widthRatio = Math.round(srcWidth / reqWidth.toFloat())</span><br><span class="line">        <span class="comment">// Choose the smallest ratio as inSampleSize value, this will guarantee</span></span><br><span class="line">        <span class="comment">// a final image with both dimensions larger than or equal to the</span></span><br><span class="line">        <span class="comment">// requested height and width.</span></span><br><span class="line">        inSampleSize = min(heightRatio, widthRatio)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// We want the actual sample size that will be used, </span></span><br><span class="line">    <span class="comment">// so round down to nearest power of 2.</span></span><br><span class="line">    <span class="keyword">var</span> power = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (power * <span class="number">2</span> &lt; inSampleSize) &#123;</span><br><span class="line">        power *= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> power</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了不关掉硬件加速来保证用户体验，我们用 BitmapRegionDecoder 把图片大卸八块，接着用 fullBitmap 实现了渐进式加载，用 scale 计算出 sampleSize 创建出 TileMap，在不同的 scale 下展示不同质量的图片块，体验更舒适的同时占内存还低。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/10/9voj2lwLBfiWdEy.jpg&quot; alt=&quot;tiles.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大图加载器 TileView 实践探索（下）</title>
    <link href="http://yoursite.com/2019/02/19/%E5%A4%A7%E5%9B%BE%E5%8A%A0%E8%BD%BD%E5%99%A8%20TileView%20%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/19/大图加载器 TileView 实践探索（下）/</id>
    <published>2019-02-19T13:18:09.587Z</published>
    <updated>2020-04-13T17:41:22.009Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/04/10/FqybNGsftElHg3d.jpg" alt="long.jpg"></p><a id="more"></a><p>上篇文章我们分析了如何把长图加载的问题大卸八块，本篇文章将从自定义 <strong>Touch</strong> 事件处理和 <strong>中图渐进</strong> 两方面讲述</p><h3 id="onTouch"><a href="#onTouch" class="headerlink" title="onTouch"></a>onTouch</h3><p>因为有了图片的渐进显示，所以自己实现 Touch 事件比较灵活，便于后期扩展</p><p><img src="https://i.loli.net/2020/04/10/mAjz61u9tIFXkw8.png" alt="onTouch"></p><p>首先，scale 是用来表示图片缩放比例的，translation 是用来标记屏幕左上角相对于图片的位置，用于改变图片位置</p><p><code>singeTap</code>、<code>doubleTap</code> 和 <code>fling</code> 可以创建 <code>GestureDetectorCompat</code> 来判断，其中 <code>singeTap</code> 把点击事件外部；</p><p><code>doubleTap</code> 使用双击位置的坐标、相对于图片的坐标和最终缩放系数改变 scale 和 translation，为了让缩放更加自然，加上了缓动动画。动画结束后刷新 Tiles —— 加载新的 bitmap 并回收视野之外的 bitmap</p><p><code>fling</code>  使用滑动速度和当前的 translation 计算出最终滑动位置，这里也用缓动动画让图片在滑动的最后慢慢停下来。在动画结束后，图片如到达边缘则处理 Drag 事件，否则就也要刷新 Tiles</p><p><code>singleTouch</code> 则是处理单指滑动图片的情况，在 <code>ACTION_DOWN</code> 记录起始位置，在 <code>ACTION_MOVE</code> 改变 translation ，在 <code>ACTION_MOVE</code> 更新 Tiles，这样来实现单指滑动；而实际处理还要多一点，在 <code>ACTION_DOWN</code>  中记录点击时间来实现图片长按，避免 touch 事件处理的误触发 LongClick；在 <code>ACTION_MOVE</code> 需要处理滑动冲突，兼容 ViewPager；在 <code>ACTION_MOVE</code> 和 <code>ACTION_DOWN</code> 中处理 Drag 事件，来完成拖拽关闭图片的功能</p><p><code>multiTouch</code> 处理的是双指缩放图片，在 <code>ACTION_POINTER_DOWN</code> 中记录双指距离和双指之间的中点坐标；在 <code>ACTION_MOVE</code> 更新 scale 和 translation，这里注意的是，translation 的更新保证图片向着双指中心位移；在 <code>ACTION_POINTER_UP</code>  中处理抬起一根手指变成单指滑动的情况</p><h3 id="中图渐进"><a href="#中图渐进" class="headerlink" title="中图渐进"></a>中图渐进</h3><p>在大图下载完后我们有了模糊图向原图渐进，但是在图片下载过程中需要中图过渡到大图来提升体验</p><p><img src="https://i.loli.net/2020/04/10/o4raDkeGlLbF3ij.png" alt="preview"></p><p><code>TileView</code> 参考 PhotoView 的实现，把主要工作委托给 <code>TileViewAttacher</code>，对外暴露 <code>setPreview</code> 来加载中图，<code>setImageUri</code> 来加载大图文件。值得注意的是，中图和大图是并行执行的，避免中图的加载异常影响到大图</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>TileView 利用加载大图可见的一小块来避免内存消耗和滑动卡顿的问题，并利用不同的 scale 计算出不同清晰度的图片实现渐进性加载；利用 <code>GestureDetectorCompat</code> 处理不同手势下的对应效果并使用缓动动画实现自然的缩放滑动效果；在 EventTouch 中解决滑动冲突兼容 ViewPager；实现中图占位过渡到大图下载完成，进一步提升体验</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/10/FqybNGsftElHg3d.jpg&quot; alt=&quot;long.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜间模式实践探索——QA</title>
    <link href="http://yoursite.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/"/>
    <id>http://yoursite.com/2018/08/09/夜间模式实践探索——QA/</id>
    <published>2018-08-09T11:49:09.000Z</published>
    <updated>2020-04-09T15:40:30.930Z</updated>
    
    <content type="html"><![CDATA[<p>通过之前的文章，我已经把夜间模式的实现和原理都分析完了，尽管方案已经满足大部分情况下的需求，但是实践过程中还是踩了很多坑。本文就以 QA 的形式把夜间模式的遇到的问题简要聊一聊，希望可以对诸位有所启发</p><p><img src="https://i.loli.net/2020/04/09/WchdKapTJ2kbHyD.jpg" alt="q_a.jpg"></p><a id="more"></a><ul><li><p><strong>夜间模式下 Toolbar 右侧展开菜单栏不生效</strong></p><p>因为 Toolbar 的展开菜单栏自定义样式比较麻烦，但是我发现了可以用 <code>setPopupTheme</code> 来改变 Toolbar 主题 ~这样，夜间模式下的菜单栏的背景色会变成黑色，字体会变成白色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toolbar.setPopupTheme(NightHelper.isNight() </span><br><span class="line">                      ? R.style.ThemeOverlay_AppCompat_Dark </span><br><span class="line">                      : R.style.ThemeOverlay_AppCompat_Light);</span><br></pre></td></tr></table></figure></li><li><p><strong>夜间模式下 CheckBox 和 RadioButton 不生效</strong></p><p>如果你使用原生的 <strong>CheckBox</strong> 或者 <strong>RadioButton</strong> 会发现它们在夜间模式下颜色是不会改变，因为它没有使用你夜间模式下的资源色值😑  针对这个问题，在 res/color 中新建一个 thint.xml 设置好颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/night_gray"</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/night_blue"</span> <span class="attr">android:state_checked</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/night_gray"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p>然后在 <code>app:buttonTint</code> 中把 thint.xml 设置进去就可以啦~</p><p>注：上述引用颜色值都是包含两种模式色值的</p></li><li><p><strong>夜间模式下 TabLayout 多状态的 Text 颜色异常</strong></p><p>对于字体颜色，默认的做法是通过 getResourceId 来获取资源 Id，但像 TabLayout 这种<strong>多状态</strong>的颜色值在 TextView 中是使用 <code>ColorStateList</code> 来实现的~ </p><p>注意⚠️ 不能使用 <code>TypedArray#getColorStateList</code>，因为拿到的 ColorStateList 是当前模式下已获取好的颜色值，不会随着模式的改变而改变😑 </p><p>因此，我们得在初始化的时候通过 <code>TypedArray#getResourceId</code> 拿到包含多种状态颜色值的 textColorId ，然后在切换夜间模式的时候调用 <code>setColorStateList</code> 来重新设置新的 <code>ColorStateList</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setColorStateList</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (targetView <span class="keyword">is</span> TextView) &#123;</span><br><span class="line">         ContextCompat.getColorStateList(context, textColorId)?.also &#123;</span><br><span class="line">             targetView.setTextColor(it) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>setNightCallback 这个方法好麻烦哦，能不能反向查色值</strong></p><p>如果遇到了在代码里动态设置颜色值，我就没法获取到它的 rescourceId，所以只能使用 <code>setNightCallback</code> 的回调中再渲染一次。注意❗️这个规则只需要应用于在 MainActivity 中的 View，因为切换夜间模式它要重新渲染，其它情况的 View 可以为所欲为，无须在意这个~</p><p>针对这种情况，不能通过颜色值反查 rescourceId 的原因是因为日间模式下同一种颜色可能对应 n 个夜间模式的色值，反查会让规则变得复杂且麻烦……</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--color in day mode--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_background"</span>&gt;</span>#ffffff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_text"</span>&gt;</span>#0ffffff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--color in nihgt mode--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_background"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white_text"</span>&gt;</span>#000009<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>夜间模式下图片加载大小不对</strong></p><p>图片资源不能全部放在 <code>drawable-night</code> 中，它是对应日间模式 drawable 的资源；如果是图片资源有对应关系，应该看它原先的位置，把资源文件放在相应的 <code>drawable-night-[dpi]</code> 中</p></li><li><p><strong>RecyclerView 列表中的 Header 和 Footer 在它们不可见时，会导致切换夜间模式后没有生效</strong></p><p>在即刻中，Header 和 Footer 的 ViewHolder 是通过变量缓存起来的，滑动时不会重新创建也不会被复用，因此在切换夜间模式的时候，如果它们不可见，就不在 rootView 的递归范围内，导致它们不会被重新渲染……</p><p>解决的方法是在切换夜间模式的时候对 Header 或者 Footer 调用 resetViews 重渲染它们的颜色</p></li><li><p><strong>夜间模式下 Dialog 不生效</strong></p><p>对于原生的 AlertDialog，需要创建一个夜间模式下 Dialog 的主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Dialog.Night"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Dialog.Alert"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/night_white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/night_accent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/night_text<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/night_black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着创建 <code>AlertDialog.Builder</code>，在夜间模式下应用夜间主题</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder(<span class="keyword">if</span> (NightHelper.isNight())</span><br><span class="line">        ContextThemeWrapper(context, R.style.Dialog_Night) <span class="keyword">else</span> context)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 WebView 夜间模式异常</strong></p><p>因为 WebView 第一次初始化的时候会 reset UI mode, 导致该页面下在 WebView 初始化后渲染的 View 都会恢复日间模式，详见 <a href="https://groups.google.com/forum/#!msg/google-admob-ads-sdk/OZzHq_-wAFY/K50jClZcBAAJ" target="_blank" rel="noopener">Google 的讨论</a></p><p>知道了原因后，这个问题解决起来也比较容易，在 WebView 初始化后调用 <code>setLocalNightMode</code> 恢复夜间模式，让它之后的 View 按照夜间模式的规则渲染即可。不过，使用这套规则的 Activity 都要添加  <code>android:configChanges=&quot;uiMode&quot;</code></p></li><li><p><strong>Web 页面没有夜间模式呀</strong></p><p>首先，如果产品需要改前端 Web 页面颜色，那么需要和前端同学一起配合，把你当前的状态告诉他。如果这块前端同学还没准备好，那可以使用在 WebView 中重写 onDraw 的方法，调用 <code>canvas#drawColor</code> 给 WebView 添加一个遮罩</p></li><li><p><strong>图片遮罩的实现</strong></p><p>这个也是一个复杂的功能，应用是否需要取决你的设计和产品定位，所以没有展开讲，主要的思路还是给 <code>ImageView#setColorFilter</code></p><p>如果是对 TextView 设置了 drawableLeft 之类的，需要对 TextView 的 drawable 进行加遮罩处理</p><p>如果图片原先有遮罩，夜间模式需要考虑原先的遮罩，所以需要提供外部方法禁用某些图片不加遮罩</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文把在实际开发中遇到的小问题分享出来，如果大家遇到什么疑惑也可以与我讨论，把更多情况更新到文章中🎉🎉</p><h4 id="夜间模式系列文章"><a href="#夜间模式系列文章" class="headerlink" title="夜间模式系列文章"></a>夜间模式系列文章</h4><p><a href="http://wenqin231.com/2018/06/19/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%BC%80%E7%AF%87/" target="_blank" rel="noopener">夜间模式实践探索——开篇</a></p><p><a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">夜间模式实践探索——展开讲讲</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">夜间模式实践探索——源码分析</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/" target="_blank" rel="noopener">夜间模式实践探索——QA</a></p><p><em>参考资料</em></p><p><a href="https://medium.com/androiddevelopers/appcompat-v23-2-daynight-d10f90c83e94" target="_blank" rel="noopener">AppCompat — DayNight</a></p><p><a href="https://www.jianshu.com/p/3b55e84742e5" target="_blank" rel="noopener">知乎和简书的夜间模式实现套路</a></p><p><strong>欢迎大家来<a href="http://okjike.com/careers" target="_blank" rel="noopener">即刻</a>找我玩</strong>❤️</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过之前的文章，我已经把夜间模式的实现和原理都分析完了，尽管方案已经满足大部分情况下的需求，但是实践过程中还是踩了很多坑。本文就以 QA 的形式把夜间模式的遇到的问题简要聊一聊，希望可以对诸位有所启发&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/09/WchdKapTJ2kbHyD.jpg&quot; alt=&quot;q_a.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜间模式实践探索——源码分析</title>
    <link href="http://yoursite.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/09/夜间模式实践探索——源码分析/</id>
    <published>2018-08-09T07:17:39.000Z</published>
    <updated>2020-04-09T15:38:43.228Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">上文</a>的结尾谈到了一个新的需求——假设某个页面不需要夜间模式，那么就调用 <code>setLocalNightMode</code> 来改变夜间模式状态，从而取消掉这个页面的夜间模式，但是其实这种方式会影响到上一个页面的 UI ~</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setLocalNightMode</span><span class="params">(activity: <span class="type">AppCompatActivity</span>, isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    activity.delegate.setLocalNightMode(<span class="keyword">if</span> (isNight)</span><br><span class="line">        AppCompatDelegate.MODE_NIGHT_YES <span class="keyword">else</span> AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回顾之前封装的 <code>setLocalNightMode</code> 可以发现，调用的主角是 <code>activity#delegate</code>，但是它不仅改变了当前 Activity 的夜间模式，甚至连其它「活着的」Activity 也被其连累。那这究竟是怎么一回事，本文将分析这其中的源码实现，帮助读者更好地理解这套官方的 Android 夜间模式</p><p><img src="https://i.loli.net/2020/04/09/IV3LJSvtKb8hTzQ.jpg" alt="dev.jpg"></p><a id="more"></a><p>我们先来看看 <code>setLocalNightMode</code> 的调用主角 <code>getDelegate</code>，在 <code>AppCompatActivity</code> 中找到 <code>getDelegate</code> 的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AppCompatDelegate <span class="title">getDelegate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDelegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mDelegate = AppCompatDelegate.create(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mDelegate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个懒汉式的单例，通过 <code>AppCompatDelegate#create</code> 来获得 <code>mDelegate</code>。<code>AppCompatDelegate</code> 是一个抽象类，在它的 <code>create</code> 方法中根据不同的 Android 版本创建对应的继承类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AppCompatDelegate <span class="title">create</span><span class="params">(Context context, Window window,</span></span></span><br><span class="line"><span class="function"><span class="params">        AppCompatCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplN(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV23(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV14(context, window, callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单地看这几个类，就会发现最主要的实现是在 <code>AppCompatDelegateImplV14</code>，其他类的扩展方法与夜间模式无关，顺便我们获得一个有用的信息，当前夜间模式的功能最低支持 API14 ~</p><p>接着，我们在 <code>AppCompatDelegateImplV14</code> 中找到了 <code>setLocalNightMode</code> 的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalNightMode</span><span class="params">(@NightMode <span class="keyword">final</span> <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MODE_NIGHT_AUTO:</span><br><span class="line">        <span class="keyword">case</span> MODE_NIGHT_NO:</span><br><span class="line">        <span class="keyword">case</span> MODE_NIGHT_YES:</span><br><span class="line">        <span class="keyword">case</span> MODE_NIGHT_FOLLOW_SYSTEM:</span><br><span class="line">            <span class="keyword">if</span> (mLocalNightMode != mode) &#123;</span><br><span class="line">                mLocalNightMode = mode;</span><br><span class="line">                <span class="keyword">if</span> (mApplyDayNightCalled) &#123;</span><br><span class="line">                    <span class="comment">// If we've already applied day night, re-apply since we won't be</span></span><br><span class="line">                    <span class="comment">// called again</span></span><br><span class="line">                    applyDayNight();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">     ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中看出，<code>setLocalNightMode</code> 除了把 mode 赋值给 mLocalNightMode 外，还会调用一遍 <code>applyDayNight</code> 来使夜间模式生效。顺带一提， <code>appDayNight</code> 还会在 Activity 的 <code>onCreate</code> 和 <code>onStart</code> 中被调用，也就是 Activity 启动的时候就会根据 mode 来适配夜间模式~ </p><p>那我们来看看它的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">applyDayNight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> applied = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@NightMode</span> <span class="keyword">final</span> <span class="keyword">int</span> nightMode = getNightMode();</span><br><span class="line">    <span class="meta">@ApplyableNightMode</span> <span class="keyword">final</span> <span class="keyword">int</span> modeToApply = mapNightMode(nightMode);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (modeToApply != MODE_NIGHT_FOLLOW_SYSTEM) &#123;</span><br><span class="line">        applied = updateForNightMode(modeToApply);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    mApplyDayNightCalled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> applied;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先它是通过 <code>getNightMode</code> 和 <code>mapNightMode</code> 获得最终 mode，我们先看前者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NightMode</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNightMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mLocalNightMode != MODE_NIGHT_UNSPECIFIED ? </span><br><span class="line">        mLocalNightMode : getDefaultNightMode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从方法中可以看出来，如果 mLocalNightMode 是有效值，就使用 mLocalNightMode, 否则使用 <code>getDefalutNightMode</code>。<code>getDefalutNightMode</code> 是  <code>AppCompatDelegate</code> 中的方法，它返回 <code>setDefaultNightMode</code> 设置的 mode。这个方法告诉了我们，localNightMode 优先于 defaultNightMode !</p><p><code>mapNightMode</code> 只是对 mode 的类型转换，这里就不赘述了。回过头来继续看 <code>applyDayNight</code>~ 当我们把夜间模式的 mode 设置为<code>MODE_NIGHT_YES</code> 或者 <code>MODE_NIGHT_NO</code> 时，就会触发 <code>updateForNightMode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Updates the &#123;<span class="doctag">@link</span> Resources&#125; configuration &#123;<span class="doctag">@code</span> uiMode&#125; with the</span></span><br><span class="line"><span class="comment"> * chosen &#123;<span class="doctag">@code</span> UI_MODE_NIGHT&#125; value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateForNightMode</span><span class="params">(@ApplyableNightMode <span class="keyword">final</span> <span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Resources res = mContext.getResources();</span><br><span class="line">    <span class="keyword">final</span> Configuration conf = res.getConfiguration();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> currentNightMode = conf.uiMode &amp; Configuration.UI_MODE_NIGHT_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newNightMode = (mode == MODE_NIGHT_YES)</span><br><span class="line">            ? Configuration.UI_MODE_NIGHT_YES</span><br><span class="line">            : Configuration.UI_MODE_NIGHT_NO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNightMode != newNightMode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldRecreateOnNightModeChange()) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">final</span> Configuration config = <span class="keyword">new</span> Configuration(conf);</span><br><span class="line">            <span class="keyword">final</span> DisplayMetrics metrics = res.getDisplayMetrics();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Update the UI Mode to reflect the new night mode</span></span><br><span class="line">            config.uiMode = newNightMode | </span><br><span class="line">                (config.uiMode &amp; ~Configuration.UI_MODE_NIGHT_MASK);</span><br><span class="line">            res.updateConfiguration(config, metrics);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里省略了一些代码，关键的代码是 <code>Resoures#updateConfiguration</code>，它会更新资源文件的引用规则——优先使用 night 文件下的资源，资源缺失才使用默认资源</p><p>分析到这里，终于恍然大悟！因为 <code>setLocalNightMode</code> 最终更改的是全局的资源文件引用方式，所以是在当前页面修改的夜间模式，其实也会对其他启动着的页面有所影响~</p><p><img src="https://i.loli.net/2020/04/09/UbndvV2zkMHIO3m.jpg" alt="soga.jpeg"></p><p>因此，如果一个页面想禁用夜间模式，只能把色值换成没有配对夜间模式的色值~ 当然，如果有更好的方式，欢迎与我讨论~</p><h4 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a>更多细节</h4><p>虽然夜间模式的大体实现和原理我都分析过了，但是还有很多细节问题不太适合花大量的篇幅描述。因此，在<a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/" target="_blank" rel="noopener">「夜间模式实践探索——QA」</a>中，将会以问答的形式对这些细节做逐一分析，恭候查阅~</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当我们通过 <code>setDefalutNightMode</code> 的时候，<code>Activity#onCreate</code> 会调用 <code>applyDayNight</code>，内部会根据 defaultNightMode 来确定资源引用方式；当我们切换夜间模式时，我们会调用 <code>setLocalNightMode</code>，这个方法内会调用 <code>applyDayNight</code>，内部是忽略之前的 defalutNightMode，而是用 localNightMode 来确定新的资源引用方式。因为当前页面的 UI 已经渲染完成了，新的资源引用方式只对调用 <code>setLocalNightMode</code> 后的渲染有效，所以官方建议配合 <code>activity#recreate</code> 来实现。但是重启页面 UI 上不友好，故使用 <code>NightHeper#resetViews</code> 对渲染好的 UI 递归遍历，重新渲染~</p><h4 id="夜间模式系列文章"><a href="#夜间模式系列文章" class="headerlink" title="夜间模式系列文章"></a>夜间模式系列文章</h4><p><a href="http://wenqin231.com/2018/06/19/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%BC%80%E7%AF%87/" target="_blank" rel="noopener">夜间模式实践探索——开篇</a></p><p><a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">夜间模式实践探索——展开讲讲</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">夜间模式实践探索——源码分析</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/" target="_blank" rel="noopener">夜间模式实践探索——QA</a></p><p><em>参考资料</em></p><p><a href="https://medium.com/androiddevelopers/appcompat-v23-2-daynight-d10f90c83e94" target="_blank" rel="noopener">AppCompat — DayNight</a></p><p><a href="https://www.jianshu.com/p/3b55e84742e5" target="_blank" rel="noopener">知乎和简书的夜间模式实现套路</a></p><p><a href="https://www.uisdc.com/tencent-qq-night-mode" target="_blank" rel="noopener">超过8亿人使用的QQ，总结了夜间模式设计的通用方法</a></p><p><strong>欢迎大家来<a href="http://okjike.com/careers" target="_blank" rel="noopener">即刻</a>找我玩</strong>❤️</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上文&lt;/a&gt;的结尾谈到了一个新的需求——假设某个页面不需要夜间模式，那么就调用 &lt;code&gt;setLocalNightMode&lt;/code&gt; 来改变夜间模式状态，从而取消掉这个页面的夜间模式，但是其实这种方式会影响到上一个页面的 UI ~&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLocalNightMode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(activity: &lt;span class=&quot;type&quot;&gt;AppCompatActivity&lt;/span&gt;, isNight: &lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    activity.delegate.setLocalNightMode(&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isNight)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AppCompatDelegate.MODE_NIGHT_YES &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; AppCompatDelegate.MODE_NIGHT_NO)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回顾之前封装的 &lt;code&gt;setLocalNightMode&lt;/code&gt; 可以发现，调用的主角是 &lt;code&gt;activity#delegate&lt;/code&gt;，但是它不仅改变了当前 Activity 的夜间模式，甚至连其它「活着的」Activity 也被其连累。那这究竟是怎么一回事，本文将分析这其中的源码实现，帮助读者更好地理解这套官方的 Android 夜间模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/09/IV3LJSvtKb8hTzQ.jpg&quot; alt=&quot;dev.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜间模式实践探索——展开讲讲</title>
    <link href="http://yoursite.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/"/>
    <id>http://yoursite.com/2018/08/08/夜间模式实践探索——展开讲讲/</id>
    <published>2018-08-08T03:21:55.000Z</published>
    <updated>2020-04-09T15:32:55.202Z</updated>
    
    <content type="html"><![CDATA[<p>承接上文，使用 <code>setDefaultNightMode</code> 来设置全局的日夜间模式，但它对启动过的 Activity 无效，所以我们得使用 <code>setLocalNightMode</code> 设置启动着的 Activity 的夜间模式，再对布局内的 View 重新渲染颜色值来切换夜间模式。这看上去好像并不复杂，那具体的实现是怎样的，本文将展开讲讲这套夜间模式的具体实现~</p><p><img src="https://i.loli.net/2020/04/09/y1XaHoGvMtndAZb.jpg" alt="header.jpg"></p><a id="more"></a><h4 id="整理颜色值"><a href="#整理颜色值" class="headerlink" title="整理颜色值"></a>整理颜色值</h4><p>工欲善其事，必先利其器。实践夜间模式的第一步，是整理应用内的颜色值。这相当于对整个应用内颜色使用进行一次大扫除，并对那些不用 <code>@color</code> 的地方规范一下，最后把整理出来的颜色值和设计给的夜间模式的颜色值对应起来，就可以得到两个 <code>colors.xml</code></p><p><img src="https://i.loli.net/2020/04/09/witm2YjpqgS1CPh.png" alt="colors_example.png"></p><p>你可以把基本的颜色值放到 <code>base_colors.xml</code> 中，而需要夜间模式的颜色值使用 <code>night_</code> 开头命名放进 <code>colors.xml</code> 中。为了让改动更小，你也可以结合自身应用情况命名~</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"night_background_white"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"night_text_black"</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个文件夹命名为 values-night，把夜间模式中的颜色值放在这个 <code>colors.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"night_background_white"</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"night_text_black"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意！<strong>它们的颜色值命名必须相同！</strong>当你切换夜间模式后，系统就会使用 values-night 中的颜色值来渲染新的页面~</p><p>图片资源也是一样的，把需要用到的夜间模式的资源放到相应的 <code>night_</code> 文件夹中即可…</p><h4 id="NightHelper"><a href="#NightHelper" class="headerlink" title="NightHelper"></a>NightHelper</h4><p>由于官方的 API 没有获取当前夜间模式状态的靠谱方法，所以只能把夜间模式的状态值用 <code>SharedPreference</code> 持久化存储下来。然后，我就可以在应用启动的自定义 Application 中调用 <code>setDefaultNightMode(isNight)</code>  ，让应用启动的时候就用之前保存的夜间模式状态来渲染 UI。</p><p>这里我创建了一个 <code>NightHelper</code> 的工具类来帮助我把这些操作封装起来：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NightHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> const <span class="keyword">val</span> KEY_NIGHT_MODE = <span class="string">"key_night_mode"</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">isNight</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> SpHelper&lt;<span class="built_in">Boolean</span>&gt;().<span class="keyword">get</span>(KEY_NIGHT_MODE, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">setNight</span><span class="params">(isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">            SpHelper&lt;<span class="built_in">Boolean</span>&gt;().put(KEY_NIGHT_MODE, isNight)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">setDefaultNightMode</span><span class="params">(isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">            AppCompatDelegate.setDefaultNightMode(<span class="keyword">if</span> (isNight)</span><br><span class="line">                AppCompatDelegate.MODE_NIGHT_YES <span class="keyword">else</span> AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setLocalNightMode"><a href="#setLocalNightMode" class="headerlink" title="setLocalNightMode"></a>setLocalNightMode</h4><p>通过上面猛如虎的一顿操作后，夜间模式的效果基本已经完成了 95% ，切换的时候可以这样调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toggleNightMode</span><span class="params">(isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    NightHelper.apply &#123;</span><br><span class="line">    setDefaultNightMode(isNight)</span><br><span class="line">    setNight(isNight)   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，除了 <code>MainActivity</code> 这个已经启动过的 Activity 外，其他新创建的页面都会使用夜间模式的颜色值来创建。所以剩下的 5% 就是要让「活着的」的页面流畅地切换到夜间模式。如果你仔细观察有夜间模式的 App，你会发现它们大部分都把页面模式的开关放在一级页面中，这样就就减少了「活着的」页面的处理。</p><p>所以在实际业务中，「活着的」Activity 一般只有 <code>MainActivity</code>。首先，我们要在 AndroidMainfest 中给它设置 <code>android:configChanges=&quot;uiMode&quot;</code>，然后在切换的时候使用 <code>setLocalNightMode</code>  的方法来给它设置夜间模式状态。这个方法官方是建议配合 <code>activity#recreate</code> 使其生效。但这样对于用户来说体验较差，而且市面上也很少应用会使用这样的方式，因此我们采用了递归刷新 UI 的方式</p><p><img src="https://i.loli.net/2020/04/09/YBPgo5tMymnrC9U.jpg" alt="show.jpg"></p><h4 id="NightView"><a href="#NightView" class="headerlink" title="NightView"></a>NightView</h4><p>那么为了刷新 UI，我定义了接口 <code>NightView</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NightView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">resetNightColors</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setNightCallback</span><span class="params">(callback: <span class="type">OnNightCallback</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，创建 <code>NightTextView</code>、<code>NightFrameLayout</code>、<code>NightRelativeLayout</code> 等 MainActivity 中有用到的 View，让它们实现 <code>NightView</code>。每个 NightView 都委托 <code>NightViewAttacher</code> 来处理内部逻辑</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NightTextView</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">        context: Context, attrs: AttributeSet? = <span class="literal">null</span>, defStyleAttr: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">) : AppCompatTextView(context, attrs, defStyleAttr), NightView &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> attacher = NightViewAttacher(<span class="keyword">this</span>, context, attrs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resetNightColors</span><span class="params">()</span></span> &#123;</span><br><span class="line">        attacher.setBackground()</span><br><span class="line">        attacher.setTextColor()</span><br><span class="line">        attacher.toggleCallback()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setNightCallback</span><span class="params">(callback: <span class="type">OnNightCallback</span>)</span></span> &#123;</span><br><span class="line">        attacher.setNightCallback(callback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们可以根据 View 的特点在 <code>resetNightColors</code> 调用相应的方法重新渲染色值。<code>setNightCallback</code> 是一种特殊的情况，因为涉及到 <code>NightAttacher</code> 的逻辑，所以会在 <code>NightAttacher</code> 中介绍</p><p>看到这里，你可能眉头一皱：那是不是要把所有 MainActivity 的 View 全部替换成 NightView？工作量很大耶！</p><p>其实，如果你们项目中的 xml 全都使用自定义 View，那只需要让它们实现 NightView 接口，并创建 <code>NightViewAttacher</code>，剩下的工作桥接给它就行了；而如果你们用的是原生的 View，那么可以使用 <code>LayoutInflaterCompat#setFactory2</code> 对 xml 中的 View 进行替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflaterCompat.setFactory2(layoutInflater, <span class="keyword">object</span> : LayoutInflater.Factory2 &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(parent: <span class="type">View</span>, name: <span class="type">String</span>, context: <span class="type">Context</span>, attrs: <span class="type">AttributeSet</span>)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">var</span> view: View? = <span class="literal">null</span></span><br><span class="line">       <span class="keyword">when</span> (name) &#123;</span><br><span class="line">            <span class="string">"TextView"</span> -&gt; view = NightTextView(context, attrs)</span><br><span class="line">            <span class="string">"FrameLayout"</span> -&gt; view = NightFrameLayout(context, attrs)</span><br><span class="line">            <span class="string">"RelativeLayout"</span> -&gt; view = NightRelativeLayout(context, attrs)</span><br><span class="line">                <span class="comment">// 在这里替换你需要的 View</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view ?: delegate.createView(parent, name, context, attrs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(name: <span class="type">String</span>, context: <span class="type">Context</span>, attrs: <span class="type">AttributeSet</span>)</span></span>: View?&#123;</span><br><span class="line">        <span class="keyword">return</span> onCreateView(<span class="literal">null</span>, name, context, attrs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不过，代码里的创建的 View 你还是得手动替换成 <code>NightView</code>，如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> textView = NightTextView(context)</span><br></pre></td></tr></table></figure><h4 id="NightViewAttacher"><a href="#NightViewAttacher" class="headerlink" title="NightViewAttacher"></a>NightViewAttacher</h4><p>NightViewAttacher 作为 NightView 的主要执行者，肩上的责任很重的~ NightView 具体的刷新夜间模式效果都是桥接给它来实现。那么它究竟是如何完成 NightView 委托的工作？</p><p>首先，它需要一些原生属性，我们可以在 attrs 文件中帮它声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"NightView"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"android:background"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"android:tint"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，它就可以在 NightViewAttacher 中通过 <code>getResourceId</code> 获得原生颜色属性~ 注意哦，这个属性是 <code>@ColorRes</code>，要通过 <code>ContextCompat#getColor</code> 生成相应的色值。在夜间模式下，系统会从 night 文件中获取相应资源</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setTextColor</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (textColorId &gt; <span class="number">0</span> &amp;&amp; targetView <span class="keyword">is</span> TextView) &#123;</span><br><span class="line">        targetView.setTextColor(ContextCompat.getColor(context, textColorId))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果是通过 <code>TypeArray#getColor</code> 拿到的色值不会根据夜间模式的状态去切换不同色值，因为这个时候拿到的颜色值已经是 <code>@ColorInt</code>， 就无法根据当前的模式来显示相应色值</p><p>在 NightAttacher 中，我们只能获得 xml 中定义的色值。如果是在代码中设置的颜色，就会导致切换的时候无法拿到色值来重新渲染。基于这个原因，我们定义了 <code>setNightCallback</code> 的方法，把设置颜色的方法放到 callback 内部做。在 <code>NightView#resetNightColors</code> 中把 callback 中的方法再执行一遍，达到重新 UI 效果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setNightCallback</span><span class="params">(callback: <span class="type">OnNightCallback</span>?)</span></span> &#123;</span><br><span class="line">    callback?.apply &#123;</span><br><span class="line">        call()</span><br><span class="line">        callbackList.add(<span class="keyword">this</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toggleCallback</span><span class="params">()</span></span> &#123;</span><br><span class="line">    callbackList.forEach &#123; it.call() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，内部的实现无非就是把 callback 缓存起来，然后在 <code>toggleCallback</code> 中执行，而 <code>toogleCallback</code> 会在 <code>NightView#resetNightColors</code> 中被调用。</p><p>值得注意的是， <code>setNightCallback</code> 的 callback 会在设置进去的时候调用一次，便于替换外部的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入夜间模式前</span></span><br><span class="line"><span class="keyword">val</span> textView = TextView(context)</span><br><span class="line">textView.setTextColor(ContextCompat.getColor(context, R.color.night_white))</span><br><span class="line"><span class="comment">// 加入夜间模式后</span></span><br><span class="line"><span class="keyword">val</span> textView = NightTextView(<span class="keyword">this</span>)</span><br><span class="line">textView.setNightCallback(<span class="keyword">object</span> : OnNightCallback&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">        textView.setTextColor(ContextCompat.getColor(context, R.color.night_white))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>加入夜间模式后，<code>MainActivity</code> 中在代码中设置颜色的方法被挪到 <code>setNightCallback</code> 的回调中执行，因为 setNightCallback 的回调默认会调用一次，外部调用者使用起来就更方便了~ 这里再强调一遍，并不是所有代码里设置颜色的方法都用 <code>setNightCallback</code>，只有切换时启动着的 <code>MainActivity</code> 才需要哦~</p><h4 id="resetViews"><a href="#resetViews" class="headerlink" title="resetViews"></a>resetViews</h4><p>NightView 已经准备好了，接下来我们就要在切换夜间模式的时候使用它了~ </p><p>首先，我们可以在 Activity 中通过 <code>getRootView</code> 来获取根视图</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRootView</span><span class="params">()</span></span>: View &#123;</span><br><span class="line">    <span class="keyword">return</span> window.decorView</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换夜间模式时，对 rootView 进行递归遍历，让主页面所有元素重新渲染</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">resetViews</span><span class="params">(view: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">     view.apply &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">is</span> NightView) &#123;</span><br><span class="line">             resetNightColors()</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">is</span> ViewGroup) &#123;</span><br><span class="line">             <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until childCount) &#123;</span><br><span class="line">               resetView(getChildAt(i))</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个被遍历到的 view 如果实现了 <code>NightView</code> 接口，那么就执行它的 <code>resetNightColors</code> 重新渲染 UI；如果 view 是 ViewGroup ，那么对它的子 View 进行遍历执行 <code>resetViews</code>，递归下去就可以把所有 view 的色值都重置啦~</p><h4 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h4><p>上文提及，因为 RecyclerView 布局复用的原因，resetView 会漏掉复用的布局。ItemView 不可见却缓存在 RecyclerView 的内存中，所以它们的布局在切换夜间模式的时候不会被重新渲染，这导致 RecyclerView 会在滚动的时候复用原先的没被重新渲染新色值的布局，最终导致了页面异常</p><p>解决的方法是把 RecyclerView 中缓存的布局清空掉，让 RecyclerView 滚动时重新创建布局或者复用已经被重新渲染好的布局</p><p>创建 <code>NightRecyclerView</code> 继承 RecyclerView 并实现 NightView，在 NightView 的 resetNightColors 中通过反射调用 RecyclerView 的 <code>mRecycler#clear</code>  来把缓存布局清掉</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resetNightColors</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> declaredField = javaClass.getDeclaredField (<span class="string">"mRecycler"</span>)</span><br><span class="line">        declaredField.isAccessible = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">val</span> declaredMethod = Class.forName(RecyclerView.Recycler::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">name</span>)</span></span><br><span class="line">                .getDeclaredMethod(<span class="string">"clear"</span>, *arrayOfNulls&lt;Class&lt;*&gt;&gt;(<span class="number">0</span>) <span class="keyword">as</span> Array&lt;Class&lt;*&gt;&gt;)</span><br><span class="line">        declaredMethod.isAccessible = <span class="literal">true</span></span><br><span class="line">        declaredMethod.invoke(declaredField.<span class="keyword">get</span>(<span class="keyword">this</span>), arrayOfNulls&lt;Any&gt;(<span class="number">0</span>))</span><br><span class="line">        recycledViewPool.clear()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="禁用夜间模式"><a href="#禁用夜间模式" class="headerlink" title="禁用夜间模式"></a>禁用夜间模式</h4><p>当我们实现完这些后，基本上夜间模式的效果就完成了~ 这个时候我们就会想，可能会出现一些页面根本不需要夜间模式，那么针对这些页面我们也要做特殊处理。为此，我们定义了 <code>DisableNight</code> 的接口，让不需要夜间模式的页面实现这个接口。然后判断，如果页面是 <code>DisableNight</code>，就在页面可见时调用 <code>setLocalNightMode</code> 设置日间模式，夜间不可见时设置回夜间模式~</p><p>这看似稳得一匹，但其实包含了一个 BUG —— <code>setLocalNightMode</code> 会影响所有「活着的」页面。假如 A 页面在请求数据，这时它跳转到了不需要夜间模式的 B，B 可见的时候把夜间模式设置成了日间模式，这时刚好 A 请求的数据返回了，它们渲染的 UI 就变成了日间模式……</p><p><img src="https://i.loli.net/2020/04/09/pI2UoxTPskhc9Aj.jpg" alt="large.jpg"></p><p>那为什么会出现这种情况，又得如何解决，我会在下一篇<a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">「夜间模式实践探索——源码分析」</a>中一探究竟~</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过上文分析，我相信你对夜间模式的实现已经有了初步的认识，但有两个方面需要理解清楚</p><p>第一，夜间模式的具体效果不难实现，通过 <code>setDefaultNightMode</code> 就可以轻松实现。繁琐的工作在于切换夜间模式时，要把当前的 MainActivity 中的 UI 重新渲染。因此，我们需要把 MainActivity 中的 View 全部替换成 NightView，然后递归遍历。而对于特殊的 RecyclerView，则需要把它内部缓存的布局清空掉</p><p>第二，所有 View 拿到的 <code>@ColorInt</code> 值都是16进制的数字，它不会因为夜间模式的改变而改变，而如果拿到它们的 <code>@ColorRes</code>，就可以让 <code>ContextCompat#getColor</code> 根据夜间模式的状态去拿不同资源的色值</p><h4 id="夜间模式系列文章"><a href="#夜间模式系列文章" class="headerlink" title="夜间模式系列文章"></a>夜间模式系列文章</h4><p><a href="http://wenqin231.com/2018/06/19/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%BC%80%E7%AF%87/" target="_blank" rel="noopener">夜间模式实践探索——开篇</a></p><p><a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">夜间模式实践探索——展开讲讲</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">夜间模式实践探索——源码分析</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/" target="_blank" rel="noopener">夜间模式实践探索——QA</a></p><p><em>参考资料</em></p><p><a href="https://medium.com/androiddevelopers/appcompat-v23-2-daynight-d10f90c83e94" target="_blank" rel="noopener">AppCompat — DayNight</a></p><p><a href="https://www.jianshu.com/p/3b55e84742e5" target="_blank" rel="noopener">知乎和简书的夜间模式实现套路</a></p><p><strong>欢迎大家来<a href="http://okjike.com/careers" target="_blank" rel="noopener">即刻</a>找我玩</strong>❤️</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上文，使用 &lt;code&gt;setDefaultNightMode&lt;/code&gt; 来设置全局的日夜间模式，但它对启动过的 Activity 无效，所以我们得使用 &lt;code&gt;setLocalNightMode&lt;/code&gt; 设置启动着的 Activity 的夜间模式，再对布局内的 View 重新渲染颜色值来切换夜间模式。这看上去好像并不复杂，那具体的实现是怎样的，本文将展开讲讲这套夜间模式的具体实现~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/09/y1XaHoGvMtndAZb.jpg&quot; alt=&quot;header.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夜间模式实践探索——开篇</title>
    <link href="http://yoursite.com/2018/06/19/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%BC%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/06/19/夜间模式实践探索——开篇/</id>
    <published>2018-06-19T02:25:10.000Z</published>
    <updated>2020-04-09T16:18:16.235Z</updated>
    
    <content type="html"><![CDATA[<p>2018年1月，Youtube 对 ios 客户端灰度发布夜间模式；2018 WWDC 上，Mac OS 添加了系统级的夜间模式功能，对应用进行夜间适配；18年7月，Youtube 对 Android 客户端灰度发布了夜间模式…… 而在国内，早有一批应用添加了它们的夜间模式，那么你的应用是否需要夜间模式，又该如何适配呢？ 本文将从应用需求和 Android 实现方案两个角度简要讲述~</p><p><img src="https://i.loli.net/2020/04/09/heNLlSRQ1IP4mrq.jpg" alt="night_example.jpeg"></p><a id="more"></a><h4 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h4><p><strong>从应用产品的角度来看</strong></p><ul><li>用户有没有可能在夜间高频地使用你的应用？</li><li>你的应用本身的配色是否偏亮系？</li><li>反馈这个需求的用户数占比高么？<ul><li>假如这个占比很低的话，那么团队可能需要把更多的时间花在其他需求上</li></ul></li></ul><p><strong>从设计师的角度来看</strong></p><ul><li>设计师团队是否能够提供一份合适的设计？<ul><li>设计师将决定了应用夜晚的模样，很多细节都要他来确定</li></ul></li></ul><p><strong>从工程师的角度来看</strong></p><ul><li>尽可能地让夜间效果覆盖所有的页面，而且切换效果要流畅自然</li><li>对原有代码的入侵性低，更少地代码改动</li><li>尽量避免侵入业务，即大部分情况下，业务开发不需要关心夜间模式</li></ul><p>上面的三层其实有点递进的意思，其实做到第一点，工作就算完成了。但是如果考虑到可维护性和“人身安全”，接下来的两点还是很重要的！那么，就让我来跟大家聊聊夜间模式 Android 的实现，至于 web 前端和 ios ……</p><p><img src="https://i.loli.net/2020/04/09/iw4ED6S7sIuFkJn.jpg" alt="oh_no.jpg"></p><h4 id="Android-实践思路"><a href="#Android-实践思路" class="headerlink" title="Android 实践思路"></a>Android 实践思路</h4><p>就我所知，目前 Android 端实现夜间模式有三种方式：</p><ol><li>Google 的原生支持</li><li>自定义 Android 主题</li><li>换肤</li></ol><p>Android 原生自带了夜间模式的 API，可以让<strong>新创建的页面</strong>使用配置好的夜间颜色值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setDefaultNihgtMode</span><span class="params">(isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">       AppCompatDelegate.setDefaultNightMode(<span class="keyword">if</span> (isNight) </span><br><span class="line">           AppCompatDelegate.MODE_NIGHT_YES <span class="keyword">else</span> AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于已经启动好的页面则可以调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setLocalNightMode</span><span class="params">(activity: <span class="type">AppCompatActivity</span>, isNight: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    activity.delegate.setLocalNightMode(<span class="keyword">if</span> (isNight) </span><br><span class="line">        AppCompatDelegate.MODE_NIGHT_YES <span class="keyword">else</span> AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class="line">    activity.recreate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意！需要 <code>setLocalNightMode</code> 的 Activity 在 AndroidManifest 中要设置 <code>android:configChanges=&quot;uiMode&quot;</code>，否则无法生效~</p><p>这个方案因为页面要重新启动，所以实际效果还达不到产品的要求……</p><p><img src="https://i.loli.net/2020/04/09/lKoUPzNcH74Cagr.png" alt="udontwant.png"></p><p>第二种方案是通过改变主题的方式来让应用使用不同主题下的颜色值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日间主题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorBackground"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 夜间主题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"NightAppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimaryNihgt<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDarkNight<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccentNight<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorBackground"</span>&gt;</span>@color/gray<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，需要定义两个命名一样的颜色名，在两种主题下使用不同的颜色值，在不同的主题下引用相应的色值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/colorAccent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过颜色的使用方式要从 <code>@color</code> 变成了 <code>?attr</code>，例如上面的 <code>LinearLayout</code> 的背景色切换了夜间模式后就可以使用其他颜色，而 <code>TextView</code> 的字体颜色还是原来的颜色</p><p>如果要把项目中的所有颜色值的引用方式都逐一替换，那么工程量太大了，这与我们之前说的第二点和第三点冲突</p><p>第三种方式是换肤方案，通过动态更换 Resources 来达到夜间效果，这个方案实现和维护成本较大。如果有多主题样式，可以考虑使用该方案，但是如果只是为了实现夜间模式来说，不是很值得</p><p>难道就没有一个完美的方案来实现夜间模式了么？这个还真没有！</p><p><img src="https://i.loli.net/2020/04/09/KOCH4WhrGZkfzv7.jpg" alt="tried.jpg"></p><p>不过，我们可以对第一种方案的重启页面进行优化，让页面重启变为页面刷新，加上一点点动画，夜间模式的切换立马变得优雅起来了呢~</p><p>在 Android 中可以利用 <code>LayoutInflaterFactory</code> 来替换 xml 的控件，把原生控件替换成自定义控件。然后我们对所有「活着的」的 View 递归调用自定义控件中封装好的刷新 UI 的方法，就可以解决这个问题…</p><p><img src="https://i.loli.net/2020/04/09/Lg1qr9kAmR5wF7P.jpg" alt="much_happy.jpg"></p><p>实现思路已经确定了，接下来来看看细节的实现。对于 RecyclerView 列表来说，布局是复用的，也就是那些没有被重新刷新的复用布局，它们的颜色状态会影响到新创建的页面；上面的方案是针对 xml 引用的颜色值，那么代码中引用的颜色值，我们又该如何处理；更多具体的细节实现会在<a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">「Android 夜间模式实践探索——展开讲讲」</a>中讲述</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>随着现在越来越多应用重视夜间模式，如果用户对你的应用有夜间模式的期待并且设计师有相应的设计，那么夜间模式还是很值得尝试的。虽然目前没有一套完善的方案，原生的 API 也不是特别友好，但是通过递归刷新控件的方式大体上效果还是令人满意的~</p><h4 id="夜间模式系列文章"><a href="#夜间模式系列文章" class="headerlink" title="夜间模式系列文章"></a>夜间模式系列文章</h4><p><a href="http://wenqin231.com/2018/06/19/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%BC%80%E7%AF%87/" target="_blank" rel="noopener">夜间模式实践探索——开篇</a></p><p><a href="http://wenqin231.com/2018/08/08/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E5%B1%95%E5%BC%80%E8%AE%B2%E8%AE%B2/" target="_blank" rel="noopener">夜间模式实践探索——展开讲讲</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">夜间模式实践探索——源码分析</a></p><p><a href="http://wenqin231.com/2018/08/09/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94QA/" target="_blank" rel="noopener">夜间模式实践探索——QA</a></p><p><em>参考资料</em></p><p><a href="https://medium.com/androiddevelopers/appcompat-v23-2-daynight-d10f90c83e94" target="_blank" rel="noopener">AppCompat — DayNight</a></p><p><a href="https://www.jianshu.com/p/3b55e84742e5" target="_blank" rel="noopener">知乎和简书的夜间模式实现套路</a></p><p><a href="https://www.uisdc.com/tencent-qq-night-mode" target="_blank" rel="noopener">超过8亿人使用的QQ，总结了夜间模式设计的通用方法</a></p><p><strong>欢迎大家来<a href="http://okjike.com/careers" target="_blank" rel="noopener">即刻</a>找我玩</strong>❤️</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年1月，Youtube 对 ios 客户端灰度发布夜间模式；2018 WWDC 上，Mac OS 添加了系统级的夜间模式功能，对应用进行夜间适配；18年7月，Youtube 对 Android 客户端灰度发布了夜间模式…… 而在国内，早有一批应用添加了它们的夜间模式，那么你的应用是否需要夜间模式，又该如何适配呢？ 本文将从应用需求和 Android 实现方案两个角度简要讲述~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/09/heNLlSRQ1IP4mrq.jpg&quot; alt=&quot;night_example.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
